// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Student {
  id          Int          @id @default(autoincrement())
  name        String
  lastname    String
  email       String       @unique
  createdAt   DateTime     @default(now())
  modifiedAt  DateTime     @updatedAt
  reviews     Review[]
  enrollments Enrollment[]
}

model Professor {
  id         Int      @id @default(autoincrement())
  name       String
  lastname   String
  email      String   @unique
  department String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  courses    Course[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String?      @default("Dammi una descrizione!")
  profId      Int //FK per professore
  createdAt   DateTime     @default(now())
  modifiedAt  DateTime     @updatedAt
  professor   Professor    @relation(fields: [profId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  files       File[]
  enrollments Enrollment[]

  @@unique([title, profId])
}

model File {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?  @default("Dammi una descrizione!")
  path         String?  @default("Dammi/un/path!")
  avrageRating Float?
  courseId     Int //FK per corso
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  reviews      Review[]
}

model Review {
  id         Int      @id @default(autoincrement())
  text       String
  rating     Int
  studentId  Int //FK per studente
  fileId     Int //FK per file
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  review     File     @relation(fields: [fileId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([studentId, fileId])
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  studentId  Int //FK per studente
  courseId   Int //FK per corso
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([studentId, courseId])
}
